<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".log.cs" #>
<#
    Initialize();

    for (int i = 0; i < GeneratedTypeNames.Length; i++)
    {
        WriteFile(i);
        SaveOutput(GeneratedTypeNames[i] + ".Exists.generated.cs");
    }
    WriteLine("// Auto-generation successful.");
#>
<#+
    private static readonly string[] GeneratedTypeNames =
    {
        "RectangularCollectionExtensions", 
        "RefRectangularCollectionExtensions",
        "ReadOnlyRectangularCollectionExtensions",
        "RefReadOnlyRectangularCollectionExtensions",
    };

    private static readonly string[] InterfaceTypeNames = 
    {
        "IRectangularCollection", 
        "IRefRectangularCollection",
        "IReadOnlyRectangularCollection",
        "IRefReadOnlyRectangularCollection",
    };

    private static readonly string[] GenericTypeNames = 
    {
        "TRectCollection", 
        "TRefRectCollection",
        "TReadOnlyRectCollection",
        "TRefReadOnlyRectCollection",
    };

    private void SaveOutput(string outputFileName) 
    {
        string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);
        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
        this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }

    public override void Initialize()
    {
    }

    private void WriteFile(int typeIndex)
    {
#>
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //
// File is auto-generated. Do not modify as changes may be overwritten.
// If you want to modify this file, edit template file with the same name and .tt extension.
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //

using System;
using System.Runtime.CompilerServices;

namespace Sztorm.Collections.Extensions
{
    public static partial class <#= GeneratedTypeNames[typeIndex] #>
    {
        /// <summary>
        ///     Determines whether any item that match the conditions defined by the specified
        ///     predicate exists in the current instance.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="<#= GenericTypeNames[typeIndex] #>">
        ///     <typeparamref name="<#= GenericTypeNames[typeIndex] #>"/> is 
        ///     <see cref="<#= InterfaceTypeNames[typeIndex] #>{T}"/>
        /// </typeparam>
        /// <typeparam name="TPredicate">
        ///     <typeparamref name = "TPredicate"/> is <see cref="IPredicate{T}"/> and
        ///     <see langword="struct"/>
        /// </typeparam>
        /// <param name="source">The collection in which the operation takes place.</param>
        /// <param name="match">
        ///     A <see langword="struct"/> implementing <see cref="IPredicate{T}"/> that defines
        ///     the conditions of the element to search for.
        /// </param>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool Exists<T, <#= GenericTypeNames[typeIndex] #>, TPredicate>(
            this <#= GenericTypeNames[typeIndex] #> source, TPredicate match)
            where <#= GenericTypeNames[typeIndex] #> : <#= InterfaceTypeNames[typeIndex] #><T>
            where TPredicate : struct, IPredicate<T>
            => source.FindIndex<T, <#= GenericTypeNames[typeIndex] #>, TPredicate>(match).IsSuccess;

        /// <summary>
        ///     Determines whether any item that match the conditions defined by the specified
        ///     predicate exists in the current instance.<br/>  
        ///     Use <see cref="Exists{T, <#= GenericTypeNames[typeIndex] #>, TPredicate}
        ///     (<#= GenericTypeNames[typeIndex] #>, TPredicate)"/> to avoid virtual call.
        ///     <para>
        ///         Exceptions:<br/>
        ///         <see cref="ArgumentNullException"/> <paramref name="match"/> cannot be
        ///         <see langword="null"/>.
        ///     </para>
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="<#= GenericTypeNames[typeIndex] #>">
        ///     <typeparamref name="<#= GenericTypeNames[typeIndex] #>"/> is 
        ///     <see cref="<#= InterfaceTypeNames[typeIndex] #>{T}"/>
        /// </typeparam>
        /// <param name="source">The collection in which the operation takes place.</param>
        /// <param name="match">
        ///     The <see cref="Predicate{T}"/> delegate that defines the conditions of the element
        ///     to search for.
        /// </param>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool Exists<T, <#= GenericTypeNames[typeIndex] #>>(
            this <#= GenericTypeNames[typeIndex] #> source, Predicate<T> match)
            where <#= GenericTypeNames[typeIndex] #> : <#= InterfaceTypeNames[typeIndex] #><T>
        {
            try
            {
                return source.FindIndex(match).IsSuccess;
            }
            catch (ArgumentNullException)
            {
                throw;
            }
        }
    }
}
<#+
    }
#>