<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".log.cs" #>
<#
    Initialize();

    for (int i = 0; i < GeneratedTypeNames.Length; i++)
    {
        WriteFile(i);
        SaveOutput(GeneratedTypeNames[i] + ".TrueForAll.generated.cs");
    }
    WriteLine("// Auto-generation successful.");
#>
<#+
    private static readonly string[] GeneratedTypeNames =
    {
        "RectangularCollectionExtensions", 
        "RefRectangularCollectionExtensions",
        "ReadOnlyRectangularCollectionExtensions",
        "RefReadOnlyRectangularCollectionExtensions",
    };

    private static readonly string[] InterfaceTypeNames = 
    {
        "IRectangularCollection", 
        "IRefRectangularCollection",
        "IReadOnlyRectangularCollection",
        "IRefReadOnlyRectangularCollection",
    };

    private static readonly string[] GenericTypeNames = 
    {
        "TRectCollection", 
        "TRefRectCollection",
        "TReadOnlyRectCollection",
        "TRefReadOnlyRectCollection",
    };

    private void SaveOutput(string outputFileName) 
    {
        string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);
        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
        this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }

    public override void Initialize()
    {
    }

    private void WriteFile(int typeIndex)
    {
#>
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //
// File is auto-generated. Do not modify as changes may be overwritten.
// If you want to modify this file, edit template file with the same name and .tt extension.
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //

using System;
using System.Runtime.CompilerServices;

namespace Sztorm.Collections.Extensions
{
    public static partial class <#= GeneratedTypeNames[typeIndex] #>
    {
        /// <summary>
        ///     Determines whether every item matches the conditions defined by the specified
        ///     predicate. If the current instance contains no items the return value is
        ///     <see langword="true"/>.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="<#= GenericTypeNames[typeIndex] #>">
        ///     <typeparamref name="<#= GenericTypeNames[typeIndex] #>"/> is 
        ///     <see cref="<#= InterfaceTypeNames[typeIndex] #>{T}"/>
        /// </typeparam>
        /// <typeparam name="TPredicate">
        ///     <typeparamref name = "TPredicate"/> is <see cref="IPredicate{T}"/> and
        ///     <see langword="struct"/>
        /// </typeparam>
        /// <param name="source">The collection in which the operation takes place.</param>
        /// <param name="match">
        ///     A <see langword="struct"/> implementing <see cref="IPredicate{T}"/> that defines
        ///     the conditions to check against the items.
        /// </param>
        /// <returns></returns>
        public static bool TrueForAll<T, <#= GenericTypeNames[typeIndex] #>, TPredicate>(
            this <#= GenericTypeNames[typeIndex] #> source, TPredicate match)
            where <#= GenericTypeNames[typeIndex] #> : <#= InterfaceTypeNames[typeIndex] #><T>
            where TPredicate : struct, IPredicate<T>
        {
            Bounds2D bounds = source.Boundaries;

            for (int i = 0; i < bounds.Length1; i++)
            {
                for (int j = 0; j < bounds.Length2; j++)
                {
                    if (!match.Invoke(source[new Index2D(i, j)]))
                    {
                        return false;
                    }
                }
            }
            return true;
        }

        /// <summary>
        ///     Determines whether every item matches the conditions defined by the specified
        ///     predicate. If the current instance contains no items the return value is
        ///     <see langword="true"/>.<br/>
        ///     Use <see cref="TrueForAll{T, <#= GenericTypeNames[typeIndex] #>, TPredicate}
        ///     (<#= GenericTypeNames[typeIndex] #>, TPredicate)"/> to avoid virtual call.
        ///     <para>
        ///         Exceptions:<br/>
        ///         <see cref="ArgumentNullException"/>: <paramref name="match"/> cannot be
        ///         <see langword="null"/>.
        ///     </para>
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="<#= GenericTypeNames[typeIndex] #>">
        ///     <typeparamref name="<#= GenericTypeNames[typeIndex] #>"/> is 
        ///     <see cref="<#= InterfaceTypeNames[typeIndex] #>{T}"/>
        /// </typeparam>
        /// <param name="source">The collection in which the operation takes place.</param>
        /// <param name="match">
        ///     The <see cref="Predicate{T}"/> delegate that defines the conditions to check
        ///     against the items.
        /// </param>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool TrueForAll<T, <#= GenericTypeNames[typeIndex] #>>(
            this <#= GenericTypeNames[typeIndex] #> source, Predicate<T> match)
            where <#= GenericTypeNames[typeIndex] #> : <#= InterfaceTypeNames[typeIndex] #><T>
        {
            if (match == null)
            {
                throw new ArgumentNullException(nameof(match), "match cannot be null.");
            }
            return source.TrueForAll<T, <#= GenericTypeNames[typeIndex] #>, BoxedPredicate<T>>(
                new BoxedPredicate<T>(match));
        }
    }
}
<#+
    }
#>